{{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}

{%- style -%}
  .section-{{ section_id }}-padding {
    padding-top: {{ padding_vertical | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ padding_vertical | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section_id }}-padding {
      padding-top: {{ padding_vertical }}px;
      padding-bottom: {{ padding_vertical }}px;
    }
  }

  #shopify-section-{{ section_id }} .page-width {
    padding-left: {{ padding_horizontal_desktop }}px;
    padding-right: {{ padding_horizontal_desktop }}px;
  }

  @media (max-width: 749px) {
    #shopify-section-{{ section_id }} .page-width {
      padding-left: {{ padding_horizontal_mobile }}px;
      padding-right: {{ padding_horizontal_mobile }}px;
    }
  }

  #shopify-section-{{ section_id }} .cc-section-content {
    padding: 0 0px;
    display: flex;
    flex-direction: column;
    gap: 40px;
    align-items: {% if content_alignment == 'left' %}flex-start{% else %}center{% endif %};
    justify-content: center;
    width: 100%;
  }

  #shopify-section-{{ section_id }} .cc-section-title {
    display: flex;
    flex-direction: column;
    gap:20px;
    align-items: {% if content_alignment == 'left' %}flex-start{% else %}center{% endif %};
    justify-content: center;
    width: 100%;
  }

  #shopify-section-{{ section_id }} .cc-tagline-wrapper {
    display: flex;
    align-items: center;
    justify-content: {% if content_alignment == 'left' %}flex-start{% else %}center{% endif %};
  }

  #shopify-section-{{ section_id }} .cc-tagline {
    text-transform: uppercase;
    letter-spacing: 0.1em;
    opacity: 0.7;
    margin: 0;
    text-align: {% if content_alignment == 'left' %}left{% else %}center{% endif %};
  }

  #shopify-section-{{ section_id }} .cc-tagline p {
    margin: 0;
  }

  #shopify-section-{{ section_id }} .cc-content {
    display: flex;
    flex-direction: column;
    gap: 24px;
    align-items: flex-start;
    justify-content: flex-start;
    width: 100%;
  }

  #shopify-section-{{ section_id }} .cc-main-title {
    text-align: {% if content_alignment == 'left' %}left{% else %}center{% endif %};
    width: 100%;
    max-width: {{ header_max_width }}px;
    margin: {% if content_alignment == 'left' %}0{% else %}0 auto{% endif %};
  }

  #shopify-section-{{ section_id }} .cc-main-title > * {
    margin: 0;
  }

  #shopify-section-{{ section_id }} .cc-dropdown-wrapper {
    display: flex;
    flex-direction: column;
    gap: 6px;
    align-items: {% if content_alignment == 'left' %}flex-start{% else %}center{% endif %};
    justify-content: center;
    width: 360px;
    {% if content_alignment == 'left' -%}
      padding: 0;
      margin: 0;
    {%- else -%}
      margin: 0 auto;
    {%- endif %}
  }

  #shopify-section-{{ section_id }} .cc-dropdown {
    position: relative;
    width: 100%;
  }

  #shopify-section-{{ section_id }} .cc-dropdown-button {
    background: rgb(var(--color-background));
    color: rgb(var(--color-foreground));
    border: {{ dropdown_border_width }}px solid {{ dropdown_border_color }};
    border-radius: {{ dropdown_border_radius }}px;
    padding: 15px 20px;
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 16px;
    cursor: pointer;
    font-family: inherit;
    font-size: inherit;
    font-weight: inherit;
    line-height: inherit;
    letter-spacing: inherit;
    text-transform: inherit;
  }

  #shopify-section-{{ section_id }} .cc-dropdown-text {
    color: rgb(var(--color-foreground));
    flex: 1;
    text-align: left;
    font-family: inherit;
    font-size: inherit;
    font-weight: inherit;
    line-height: inherit;
    letter-spacing: inherit;
    text-transform: inherit;
  }

  #shopify-section-{{ section_id }} .cc-dropdown-icon {
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    transform: scaleY(-1);
    flex-shrink: 0;
    color: rgb(var(--color-foreground));
  }

  /* Dropdown arrow - points up when closed, down when open */
  #shopify-section-{{ section_id }} .cc-dropdown-icon svg {
    width: 14px;
    height: 8px;
    transform: rotate(180deg); /* Points up */
    transition: transform 0.2s ease;
  }

  #shopify-section-{{ section_id }} .cc-dropdown-icon svg path {
    stroke: currentColor;
  }

  #shopify-section-{{ section_id }} .cc-dropdown.open .cc-dropdown-icon svg {
    transform: rotate(0deg); /* Points down when open */
  }

  #shopify-section-{{ section_id }} .cc-dropdown-menu {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: rgb(var(--color-background));
    border: {{ dropdown_border_width }}px solid {{ dropdown_border_color }};
    border-radius: {{ dropdown_border_radius }}px;
    margin-top: 4px;
    z-index: 10;
    backdrop-filter: blur(50px);
    display: none;
    overflow: hidden;
  }

  #shopify-section-{{ section_id }} .cc-dropdown-menu.open {
    display: block;
  }

  #shopify-section-{{ section_id }} .cc-dropdown-option {
    padding: 12px 20px;
    cursor: pointer;
    color: rgb(var(--color-foreground));
    display: flex;
    gap: 10px;
    align-items: center;
    justify-content: center;
    width: 100%;
  }

  #shopify-section-{{ section_id }} .cc-dropdown-option:first-child {
    padding-top: 16px;
  }

  #shopify-section-{{ section_id }} .cc-dropdown-option:last-child {
    padding-bottom: 16px;
  }

  #shopify-section-{{ section_id }} .cc-dropdown-option:hover {
    background: rgba(var(--color-foreground), 0.05);
  }

  #shopify-section-{{ section_id }} .cc-dropdown-option.selected {
    background: rgba(var(--color-foreground), 0.05);
    justify-content: space-between;
  }

  #shopify-section-{{ section_id }} .cc-dropdown-option .cc-option-text {
    flex: 1;
    text-align: left;
  }

  #shopify-section-{{ section_id }} .cc-dropdown-option .cc-check-icon {
    width: 24px;
    height: 24px;
    flex-shrink: 0;
    color: rgb(var(--color-foreground));
  }

  #shopify-section-{{ section_id }} .cc-dropdown-option .cc-check-icon path {
    stroke: currentColor;
  }

  #shopify-section-{{ section_id }} .cc-collection-description {
    margin-top: 16px;
    padding: {% if content_alignment == 'left' %}0{% else %}0 16px{% endif %};
    text-align: {% if content_alignment == 'left' %}left{% else %}center{% endif %};
    color: rgb(var(--color-foreground));
    opacity: 0.8;
    font-size: 14px;
    line-height: 1.6;
    max-width: {{ description_max_width }}px;
    margin-left: {% if content_alignment == 'left' %}0{% else %}auto{% endif %};
    margin-right: auto;
  }

  #shopify-section-{{ section_id }} .cc-collection-description.quote-style {
    font-style: italic;
  }

  #shopify-section-{{ section_id }} .cc-description-attribution {
    display: block;
    margin-top: 8px;
    font-style: normal;
    opacity: 0.7;
  }

  #shopify-section-{{ section_id }} .cc-bundle-benefits {
    display: flex;
    flex-direction: column;
    gap: 24px;
    align-items: center;
    justify-content: flex-start;
  }

  #shopify-section-{{ section_id }} .cc-benefits-row {
    display: flex;
    gap: 24px;
    align-items: center;
    justify-content: center;
    flex-wrap: wrap;
    width: 100%;
  }

  /* Dynamic benefits visibility */
  #shopify-section-{{ section_id }} .cc-drop-benefits {
    display: none;
  }

  #shopify-section-{{ section_id }} .cc-drop-benefits.active {
    display: flex;
  }

  #shopify-section-{{ section_id }} .cc-benefit-item {
    display: flex;
    gap: 8px;
    align-items: center;
    justify-content: flex-start;
    flex-shrink: 0;
  }

  #shopify-section-{{ section_id }} .cc-benefit-check {
    width: 20px;
    height: 20px;
    flex-shrink: 0;
  }

  #shopify-section-{{ section_id }} .cc-benefit-text {
    color: rgb(var(--color-foreground));
    white-space: nowrap;
  }

  #shopify-section-{{ section_id }} .cc-products-container {
    display: flex;
    flex-direction: column;
    gap: 40px;
    align-items: {% if content_alignment == 'left' %}flex-start{% else %}center{% endif %};
    justify-content: center;
    width: 100%;
  }

  #shopify-section-{{ section_id }} .cc-products-wrapper {
    width: 100%;
  }

  #shopify-section-{{ section_id }} .cc-products-grid {
    padding: 0;
    margin: 0;
    width: 100%;
  }

  /* Product grid layout */
  #shopify-section-{{ section_id }} .cc-drop-products {
    display: none;
  }

  #shopify-section-{{ section_id }} .cc-drop-products.active {
    display: grid;
    grid-template-columns: repeat({{ columns_desktop }}, 1fr);
    gap: {{ grid_gap_desktop }}px;
    list-style: none;
    margin: 0;
    padding: 0;
    width: 100%;
  }

  /* Product card wrapper */
  #shopify-section-{{ section_id }} .cc-product-card {
    width: 100%;
  }

  /* Default product card styles */
  #shopify-section-{{ section_id }} .product-card-link {
    display: block;
    text-decoration: none;
    color: inherit;
    transition: opacity 0.2s;
  }

  #shopify-section-{{ section_id }} .product-card-link:hover {
    opacity: 0.9;
  }

  #shopify-section-{{ section_id }} .product-card__image {
    position: relative;
    width: 100%;
    aspect-ratio: 1/1;
    overflow: hidden;
    background: rgb(var(--color-background));
    border-radius: {{ product_card_border_radius }}px;
    margin-bottom: 12px;
  }

  #shopify-section-{{ section_id }} .product-card__image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  #shopify-section-{{ section_id }} .product-card__info {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  #shopify-section-{{ section_id }} .product-card__title {
    margin: 0;
    line-height: 1.4;
  }

  #shopify-section-{{ section_id }} .product-card__price {
  }

  #shopify-section-{{ section_id }} .price-sale {
    color: rgb(var(--color-foreground));
  }

  #shopify-section-{{ section_id }} .price-compare {
    text-decoration: line-through;
    opacity: 0.6;
    margin-left: 8px;
  }

  #shopify-section-{{ section_id }} .product-card__badge {
    display: inline-block;
    padding: 4px 8px;
    background: rgba(var(--color-foreground), 0.1);
    border-radius: 4px;
    font-size: 12px;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  #shopify-section-{{ section_id }} .placeholder-svg {
    width: 100%;
    height: 100%;
    opacity: 0.3;
  }

  #shopify-section-{{ section_id }} .cc-add-bundle {
    display: flex;
    flex-direction: column;
    gap: 12px;
    align-items: {% if content_alignment == 'left' %}flex-start{% else %}center{% endif %};
    justify-content: center;
  }

  #shopify-section-{{ section_id }} .cc-add-bundle-btn {
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
  }

  @media (max-width: 990px) {
    #shopify-section-{{ section_id }} .cc-section-content {
      padding: 0 0px;
    }
    #shopify-section-{{ section_id }} .cc-drop-products.active {
      grid-template-columns: repeat(2, 1fr);
    }

    #shopify-section-{{ section_id }} .cc-benefits-row,
    #shopify-section-{{ section_id }} .cc-drop-benefits.active {
      gap: 16px;
      justify-content: center;
      flex-wrap: wrap;
    }
    #shopify-section-{{ section_id }} .cc-benefit-item {
      flex-basis: calc(50% - 8px);
      justify-content: center;
    }
  }

  @media (max-width: 749px) {
    /* Mobile grid layout */
    #shopify-section-{{ section_id }} .cc-drop-products.active {
      grid-template-columns: repeat({{ columns_mobile }}, 1fr);
      gap: {{ grid_gap_mobile }}px;
    }

    #shopify-section-{{ section_id }} .cc-benefits-row,
    #shopify-section-{{ section_id }} .cc-drop-benefits.active {
      gap: 16px;
      justify-content: center;
      flex-direction: column;
    }
    #shopify-section-{{ section_id }} .cc-benefit-item {
      justify-content: center;
    }
    #shopify-section-{{ section_id }} .cc-dropdown-wrapper {
      width: 100%;
      {% if content_alignment == 'center' -%}
        max-width: 320px;
        margin: 0 auto;
      {%- endif %}
    }
  }

  /* Custom CSS */
  {%- if custom_css != blank -%}
    {{ custom_css }}
  {%- endif -%}
{%- endstyle -%}

{%- liquid
  assign cc_handle = cart.attributes['cc-creator-handle']
  assign cc_preview_creator = preview_creator
  
  assign cc_creator = metaobject | default: metaobjects.creator[cc_handle]
  if cc_creator == blank and request.design_mode
    assign cc_creator = cc_preview_creator
  endif

  assign has_creator = false
  if cc_creator != blank
    assign has_creator = true
  endif
  assign drops_json = nil
  assign drops_collections = nil

  if has_creator and cc_creator.data and cc_creator.data.value and cc_creator.data.value['cc-creator-drops']
    assign drops_json = cc_creator.data.value['cc-creator-drops']
  endif
  if has_creator and cc_creator['cc-creator-drops'] and cc_creator['cc-creator-drops'].value
    assign drops_collections = cc_creator['cc-creator-drops'].value
  endif

  assign has_drops = false
  if drops_json and drops_json.size > 0 and drops_collections
    assign has_drops = true
  endif

  assign show_section = true
  assign use_fallback = false
  assign fallback_collection = nil
  
  if has_drops == false
    if no_drops_behavior == 'hide'
      assign show_section = false
    elsif no_drops_behavior == 'fallback' and fallback_collection != blank
      assign use_fallback = true
      assign fallback_collection = collections[fallback_collection]
      if fallback_collection and fallback_collection.products_count > 0
        assign show_section = true
      else
        assign show_section = false
      endif
    endif
  endif

  assign selected_drop = nil
  assign selected_drop_collection = nil
  if has_drops
    assign selected_drop = drops_json[0]
    assign selected_drop_id = selected_drop['cc-creator-drop-collection-id']
    if selected_drop_id != blank
      for c in drops_collections
        assign c_id = c.id | append: ''
        if c_id == selected_drop_id
          assign selected_drop_collection = c
          break
        endif
      endfor
    endif
  endif
-%}

{%- comment -%}
  Process dynamic text using snippet for bracket replacement with dot notation support.
  Supports both old format [field-name] and new format [cc_creator.path.to.field]
  Objects/arrays → JSON, strings → unquoted.
{%- endcomment -%}
{% capture tagline %}{% render 'cc-process-dynamic-text', input_text: tagline, cc_creator: cc_creator, metaobject: metaobject %}{% endcapture %}
{% capture header %}{% render 'cc-process-dynamic-text', input_text: header, cc_creator: cc_creator, metaobject: metaobject %}{% endcapture %}
{% capture button_text %}{% render 'cc-process-dynamic-text', input_text: button_text, cc_creator: cc_creator, metaobject: metaobject %}{% endcapture %}

{%- if show_section -%}
<div id="drops-anchor" class="color-{{ color_scheme }} isolate gradient section-{{ section_id }}-padding">
  <div class="page-width">
    <div class="cc-section-content">
      <div class="cc-section-title">
        {%- if tagline != blank -%}
          <div class="cc-tagline-wrapper">
            <div class="cc-tagline">{{ tagline }}</div>
          </div>
        {%- endif -%}
        <div class="cc-content">
          {%- if header != blank -%}
            <div class="cc-main-title">{{ header }}</div>
          {%- endif -%}
        </div>

        {%- if has_drops -%}
          <div class="cc-dropdown-wrapper">
            <div class="cc-dropdown" id="cc-bundle-dropdown-{{ section_id }}">
              <button class="cc-dropdown-button" id="cc-dropdown-button-{{ section_id }}">
                <span class="cc-dropdown-text" id="cc-selected-bundle-{{ section_id }}">
                  {{ selected_drop['cc-creator-drop-title'] | default: selected_drop_collection.title | escape }}
                </span>
                <div class="cc-dropdown-icon">
                  <svg width="14" height="8" viewBox="0 0 14 8" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M1 1L7 7L13 1" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  </svg>
                </div>
              </button>
              <div class="cc-dropdown-menu" id="cc-dropdown-menu-{{ section_id }}">
                {%- for json_drop in drops_json -%}
                  {%- liquid
                    assign drop_id = json_drop['cc-creator-drop-collection-id']
                    assign drop_collection = nil
                    if drop_id != blank
                      for c in drops_collections
                        assign c_id = c.id | append: ''
                        if c_id == drop_id
                          assign drop_collection = c
                          break
                        endif
                      endfor
                    endif
                    assign drop_title = json_drop['cc-creator-drop-title'] | default: drop_collection.title
                  -%}
                  {%- if drop_collection and drop_collection.products_count > 0 -%}
                    <div class="cc-dropdown-option{% if forloop.index0 == 0 %} selected{% endif %}" 
                         data-drop-id="{{ drop_id | escape }}" 
                         data-drop-index="{{ forloop.index0 }}">
                      <span class="cc-option-text">{{ drop_title | escape }}</span>
                      {%- if forloop.index0 == 0 -%}
                        <svg class="cc-check-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M20 6L9 17L4 12" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                      {%- endif -%}
                    </div>
                  {%- endif -%}
                {%- endfor -%}
              </div>
            </div>
          </div>

          {%- comment -%} Collection description {%- endcomment -%}
          {%- if selected_drop_collection and selected_drop_collection.description != blank -%}
            {%- liquid
              assign description_style = description_display_style
              assign quote_class = ''
              assign formatted_description = selected_drop_collection.description
              assign attribution = ''
              
              if description_style == 'quote_first_name' and has_creator
                assign quote_class = ' quote-style'
                assign formatted_description = '"' | append: selected_drop_collection.description | append: '"'
                assign attribution = '— ' | append: cc_creator.cc-creator-first-name
              elsif description_style == 'quote_shop_title' and has_creator and cc_creator.cc-creator-shop-title
                assign quote_class = ' quote-style'
                assign formatted_description = '"' | append: selected_drop_collection.description | append: '"'
                assign attribution = '— ' | append: cc_creator.cc-creator-shop-title
              endif
            -%}
            <div class="cc-collection-description{{ quote_class }}" id="cc-collection-description-{{ section_id }}" data-drop-id="{{ selected_drop_id | escape }}">
              {{ formatted_description }}
              {%- if attribution != blank -%}
                <span class="cc-description-attribution">{{ attribution | escape }}</span>
              {%- endif -%}
            </div>
          {%- endif -%}
        {%- endif -%}
      </div>

      {%- if has_drops or use_fallback -%}
        <div class="cc-products-container">
          <div class="cc-products-wrapper">
            {%- if use_fallback -%}
              {%- comment -%} Fallback collection display {%- endcomment -%}
              <div class="cc-products-grid cc-drop-products active">
                {%- for product in fallback_collection.products limit: products_to_show -%}
                  {%- comment -%} Calculate creator discount pricing using snippet {%- endcomment -%}
                  {% capture price_output %}{% render 'cc-price', product: product, cc_creator: cc_creator, output: 'price' %}{% endcapture %}
                  {% capture compare_price_output %}{% render 'cc-price', product: product, cc_creator: cc_creator, output: 'compare_at_price' %}{% endcapture %}
                  {% capture has_discount_output %}{% render 'cc-price', product: product, cc_creator: cc_creator, output: 'has_creator_discount' %}{% endcapture %}
                  {%- liquid
                    assign display_price = price_output | plus: 0
                    assign display_compare_price = compare_price_output | plus: 0
                    assign has_creator_discount = has_discount_output
                  -%}
                  <div class="cc-product-card">
                    {%- if product_card_snippet != blank -%}
                      {{ product_card_snippet }}
                    {%- else -%}
                      <a href="{{ product.url }}" class="product-card-link">
                        <div class="product-card__image">
                          {%- if product.featured_image -%}
                            <img src="{{ product.featured_image | image_url: width: 600 }}" alt="{{ product.title | escape }}" loading="lazy" width="600" height="600">
                          {%- else -%}
                            {{ 'product-1' | placeholder_svg_tag: 'placeholder-svg' }}
                          {%- endif -%}
                        </div>
                        <div class="product-card__info">
                          <p class="product-card__title">{{ product.title }}</p>
                          <div class="product-card__price">
                            {%- if has_creator_discount or display_compare_price > display_price -%}
                              <span class="price-sale">{{ display_price | money }}</span>
                              <span class="price-compare">{{ display_compare_price | money }}</span>
                            {%- else -%}
                              {{ display_price | money }}
                            {%- endif -%}
                          </div>
                          {%- unless product.available -%}
                            <span class="product-card__badge">{{ 'products.product.sold_out' | t }}</span>
                          {%- endunless -%}
                        </div>
                      </a>
                    {%- endif -%}
                  </div>
                {%- endfor -%}
              </div>
            {%- else -%}
              {%- comment -%} Regular drops display {%- endcomment -%}
              {%- for json_drop in drops_json -%}
              {%- liquid
                assign drop_id = json_drop['cc-creator-drop-collection-id']
                assign drop_collection = nil
                if drop_id != blank
                  for c in drops_collections
                    assign c_id = c.id | append: ''
                    if c_id == drop_id
                      assign drop_collection = c
                      break
                    endif
                  endfor
                endif
              -%}
              {%- if drop_collection and drop_collection.products_count > 0 -%}
                <div class="cc-products-grid cc-drop-products{% if forloop.index0 == 0 %} active{% endif %}" id="cc-products-{{ section_id }}-{{ drop_id }}" data-drop-id="{{ drop_id | escape }}">
                {%- for json_product in json_drop['cc-creator-drop-products'] -%}
                  {%- liquid
                    assign wanted_id = json_product['cc-creator-drop-product-shopify-id']
                    assign card_product = nil
                    if wanted_id != blank
                      for p in drop_collection.products
                        assign p_id = p.id | append: ''
                        if p_id == wanted_id
                          assign card_product = p
                          break
                        endif
                      endfor
                    endif
                  -%}
                  {%- if card_product -%}
                    {%- assign product = card_product -%}
                    {%- comment -%} Calculate creator discount pricing using snippet {%- endcomment -%}
                    {% capture price_output %}{% render 'cc-price', product: product, cc_creator: cc_creator, output: 'price' %}{% endcapture %}
                    {% capture compare_price_output %}{% render 'cc-price', product: product, cc_creator: cc_creator, output: 'compare_at_price' %}{% endcapture %}
                    {% capture has_discount_output %}{% render 'cc-price', product: product, cc_creator: cc_creator, output: 'has_creator_discount' %}{% endcapture %}
                    {%- liquid
                      assign display_price = price_output | plus: 0
                      assign display_compare_price = compare_price_output | plus: 0
                      assign has_creator_discount = has_discount_output
                    -%}
                    <div class="cc-product-card">
                      {%- if product_card_snippet != blank -%}
                        {{ product_card_snippet }}
                      {%- else -%}
                        <a href="{{ product.url }}" class="product-card-link">
                          <div class="product-card__image">
                            {%- if product.featured_image -%}
                              <img src="{{ product.featured_image | image_url: width: 600 }}" alt="{{ product.title | escape }}" loading="lazy" width="600" height="600">
                            {%- else -%}
                              {{ 'product-1' | placeholder_svg_tag: 'placeholder-svg' }}
                            {%- endif -%}
                          </div>
                          <div class="product-card__info">
                            <p class="product-card__title">{{ product.title }}</p>
                            <div class="product-card__price">
                              {%- if has_creator_discount or display_compare_price > display_price -%}
                                <span class="price-sale">{{ display_price | money }}</span>
                                <span class="price-compare">{{ display_compare_price | money }}</span>
                              {%- else -%}
                                {{ display_price | money }}
                              {%- endif -%}
                            </div>
                            {%- unless product.available -%}
                              <span class="product-card__badge">{{ 'products.product.sold_out' | t }}</span>
                            {%- endunless -%}
                          </div>
                        </a>
                      {%- endif -%}
                    </div>
                  {%- endif -%}
                {%- endfor -%}
                </div>
              {%- endif -%}
            {%- endfor -%}
            {%- endif -%}
          </div>

          {%- if has_drops -%}
            <div class="cc-add-bundle">
              <button type="button" class="button cc-add-bundle-btn" id="cc-add-bundle-{{ section_id }}" data-drop-id="{{ selected_drop_id | escape }}">
                {{ button_text | default: 'Add Bundle to Cart' }}
              </button>
            </div>
          {%- endif -%}
        </div>
      {%- endif -%}
    </div>
  </div>
</div>
{%- endif -%}

  <script>
  document.addEventListener('DOMContentLoaded', function() {
    const sectionId = '{{ section_id }}';
    const dropdown = document.getElementById('cc-bundle-dropdown-' + sectionId);
    const button = document.getElementById('cc-dropdown-button-' + sectionId);
    const menu = document.getElementById('cc-dropdown-menu-' + sectionId);
    const selectedText = document.getElementById('cc-selected-bundle-' + sectionId);
    const addBundleBtn = document.getElementById('cc-add-bundle-' + sectionId);

    // Section settings
    const buttonText = {{ button_text | default: 'Add Bundle to Cart' | json }};
    const descriptionStyle = {{ description_display_style | json }};
    const creatorFirstName = {{ cc_creator.cc-creator-first-name | json }};
    const creatorShopTitle = {{ cc_creator.cc-creator-shop-title | json }};

    // Format description based on display style
    function formatDescription(description) {
      if (!description || description.trim() === '') return '';
      
      if (descriptionStyle === 'quote_first_name' && creatorFirstName) {
        return '"' + description + '"';
      } else if (descriptionStyle === 'quote_shop_title' && creatorShopTitle) {
        return '"' + description + '"';
      }
      return description;
    }

    // Get attribution text based on display style
    function getAttribution() {
      if (descriptionStyle === 'quote_first_name' && creatorFirstName) {
        return '— ' + creatorFirstName;
      } else if (descriptionStyle === 'quote_shop_title' && creatorShopTitle) {
        return '— ' + creatorShopTitle;
      }
      return '';
    }

    // Store drops data for cart functionality
    const dropsData = {
      {%- for json_drop in drops_json -%}
        {%- liquid
          assign drop_id = json_drop['cc-creator-drop-collection-id']
          assign drop_collection = nil
          if drop_id != blank
            for c in drops_collections
              assign c_id = c.id | append: ''
              if c_id == drop_id
                assign drop_collection = c
                break
              endif
            endfor
          endif
        -%}
        {%- if drop_collection and drop_collection.products_count > 0 -%}
          '{{ drop_id }}': {
            title: {{ json_drop['cc-creator-drop-title'] | default: drop_collection.title | json }},
            description: {{ drop_collection.description | json }},
            products: [
              {%- for json_product in json_drop['cc-creator-drop-products'] -%}
                {%- liquid
                  assign wanted_id = json_product['cc-creator-drop-product-shopify-id']
                  assign card_product = nil
                  if wanted_id != blank
                    for p in drop_collection.products
                      assign p_id = p.id | append: ''
                      if p_id == wanted_id
                        assign card_product = p
                        break
                      endif
                    endfor
                  endif
                -%}
                {%- if card_product -%}
                  {
                    id: {{ card_product.id }},
                    variantId: {{ card_product.selected_or_first_available_variant.id }},
                    available: {{ card_product.available | json }}
                  }{% unless forloop.last %},{% endunless %}
                {%- endif -%}
              {%- endfor -%}
            ]
          }{% unless forloop.last %},{% endunless %}
        {%- endif -%}
      {%- endfor -%}
    };

    if (dropdown && button && menu) {
      // Toggle dropdown
      button.addEventListener('click', function() {
        dropdown.classList.toggle('open');
        menu.classList.toggle('open');
      });

      // Close dropdown when clicking outside
      document.addEventListener('click', function(e) {
        if (!dropdown.contains(e.target)) {
          dropdown.classList.remove('open');
          menu.classList.remove('open');
        }
      });

      // Handle option selection
      menu.addEventListener('click', function(e) {
        const option = e.target.closest('.cc-dropdown-option');
        if (option) {
          const dropId = option.dataset.dropId;
          const dropTitle = option.querySelector('.cc-option-text').textContent.trim();

          // Update selected text
          selectedText.textContent = dropTitle;

          // Update selected state
          menu.querySelectorAll('.cc-dropdown-option').forEach(opt => {
            opt.classList.remove('selected');
            const checkIcon = opt.querySelector('.cc-check-icon');
            if (checkIcon) checkIcon.remove();
          });
          option.classList.add('selected');
          const checkIcon = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
          checkIcon.setAttribute('class', 'cc-check-icon');
          checkIcon.setAttribute('width', '24');
          checkIcon.setAttribute('height', '24');
          checkIcon.setAttribute('viewBox', '0 0 24 24');
          checkIcon.setAttribute('fill', 'none');
          const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
          path.setAttribute('d', 'M20 6L9 17L4 12');
          path.setAttribute('stroke-width', '2');
          path.setAttribute('stroke-linecap', 'round');
          path.setAttribute('stroke-linejoin', 'round');
          checkIcon.appendChild(path);
          option.appendChild(checkIcon);

          // Close dropdown
          dropdown.classList.remove('open');
          menu.classList.remove('open');

          // Update button data attribute
          if (addBundleBtn) {
            addBundleBtn.dataset.dropId = dropId;
          }

          // Show/hide product grids
          switchToDrop(dropId);
        }
      });
    }

    // Function to switch between product grids
    function switchToDrop(dropId) {
      const allGrids = document.querySelectorAll('#shopify-section-' + sectionId + ' .cc-drop-products');
      const targetGrid = document.getElementById('cc-products-' + sectionId + '-' + dropId);

      // Hide all grids
      allGrids.forEach(grid => {
        grid.classList.remove('active');
      });

      // Show target grid
      if (targetGrid) {
        targetGrid.classList.add('active');
      }

      // Update collection description
      const descriptionEl = document.getElementById('cc-collection-description-' + sectionId);
      if (descriptionEl && dropsData[dropId]) {
        const description = dropsData[dropId].description;
        if (description && description.trim() !== '') {
          // Format description and add attribution
          const formattedDesc = formatDescription(description);
          const attribution = getAttribution();
          
          // Update class for quote styling
          if (descriptionStyle === 'quote_first_name' || descriptionStyle === 'quote_shop_title') {
            descriptionEl.classList.add('quote-style');
          } else {
            descriptionEl.classList.remove('quote-style');
          }
          
          // Set content
          if (attribution) {
            descriptionEl.innerHTML = formattedDesc + '<span class="cc-description-attribution">' + attribution + '</span>';
          } else {
            descriptionEl.textContent = formattedDesc;
          }
          
          descriptionEl.style.display = 'block';
        } else {
          descriptionEl.style.display = 'none';
        }
      }

      // Switch benefits to match the selected drop
      switchBenefits(dropId);
    }

    // Function to switch benefits based on selected drop
    function switchBenefits(dropId) {
      const allBenefits = document.querySelectorAll('#shopify-section-' + sectionId + ' .cc-drop-benefits');
      const targetBenefits = document.getElementById('cc-benefits-' + sectionId + '-' + dropId);

      // Hide all benefit sets
      allBenefits.forEach(benefits => {
        benefits.classList.remove('active');
      });

      // Show target benefit set
      if (targetBenefits) {
        targetBenefits.classList.add('active');
      }
    }

    // Add bundle to cart functionality - Universal compatibility
    if (addBundleBtn) {
      addBundleBtn.addEventListener('click', async function() {
        const dropId = this.dataset.dropId;
        if (!dropId || !dropsData[dropId]) return;

        const dropData = dropsData[dropId];
        const items = dropData.products.filter(p => p.available).map(p => ({
          id: p.variantId,
          quantity: 1
        }));

        if (!items.length) {
          alert('No available products in this bundle');
          return;
        }

        try {
          this.disabled = true;
          const originalText = this.textContent;
          this.textContent = 'Adding...';

          // Use JSON API (universal across all Shopify stores)
          const res = await fetch(window.Shopify.routes.root + 'cart/add.js', {
            method: 'POST',
            headers: { 
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify({ items: items })
          });

          const response = await res.json();
          
          // Check for errors in response
          if (!res.ok || response.status === 422 || response.status === 'error') {
            throw new Error(response.description || response.message || 'Failed to add items to cart');
          }
          
          this.textContent = 'Added!';
          
          // Universal cart update approaches (try multiple methods)
          
          // 1. Modern Shopify Ajax Cart API event
          if (window.Shopify && window.Shopify.onItemAdded) {
            window.Shopify.onItemAdded(response);
          }
          
          // 2. Try Dawn/modern theme pub-sub pattern
          if (typeof window.publish !== 'undefined' && typeof window.PUB_SUB_EVENTS !== 'undefined') {
            window.publish(window.PUB_SUB_EVENTS.cartUpdate, {
              source: 'bundle-add',
              cartData: response
            });
          }
          
          // 3. Try to find and update cart drawer/notification (Dawn, Debut, etc.)
          const cartDrawer = document.querySelector('cart-drawer');
          const cartNotification = document.querySelector('cart-notification');
          const cartElement = cartDrawer || cartNotification;
          
          if (cartElement) {
            // Try modern render method
            if (typeof cartElement.renderContents === 'function') {
              cartElement.renderContents(response);
            }
            // Remove empty class
            if (cartElement.classList && cartElement.classList.contains('is-empty')) {
              cartElement.classList.remove('is-empty');
            }
            // Try to open the cart
            if (typeof cartElement.open === 'function') {
              cartElement.open();
            }
          }
          
          // 4. Trigger jQuery events (for older themes)
          if (typeof jQuery !== 'undefined') {
            jQuery(document.body).trigger('added.ajaxProduct', [response]);
            jQuery(document.body).trigger('cart.requestComplete', [response]);
          }
          
          // 5. Dispatch native DOM event (for custom implementations)
          document.dispatchEvent(new CustomEvent('cart:updated', { 
            detail: { cart: response, items: items }
          }));
          
          // 6. Refresh cart count in header (universal selector approach)
          try {
            const cartCountResponse = await fetch(window.Shopify.routes.root + 'cart.js');
            const cartData = await cartCountResponse.json();
            
            // Update cart count badges (common selectors across themes)
            const countSelectors = [
              '.cart-count-bubble',
              '.cart-count',
              '[data-cart-count]',
              '.cart__count',
              '#cart-icon-bubble',
              '.header__icon--cart .count'
            ];
            
            countSelectors.forEach(selector => {
              const elements = document.querySelectorAll(selector);
              elements.forEach(el => {
                if (el) {
                  el.textContent = cartData.item_count;
                  if (el.classList) {
                    el.classList.remove('hidden');
                  }
                }
              });
            });
          } catch (e) {
            // Cart count update failed, but items are added
            console.log('Cart count update failed:', e);
          }
          
          // Reset button after a brief delay
          setTimeout(() => {
            this.textContent = originalText;
            this.disabled = false;
          }, 2000);
          
        } catch (err) {
          console.error('Error adding bundle to cart:', err);
          this.textContent = err.message || 'Error - Try Again';
          setTimeout(() => {
            this.textContent = buttonText;
            this.disabled = false;
          }, 3000);
        }
      });
    }
  });
</script>

